name: Deploy to EC2 (Recommended)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 가져오기
      - name: Checkout
        uses: actions/checkout@v3

      # --- 'Make application-secret.yml' 단계 전체 삭제 ---

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 빌드 (이때 application-prod.yml은 변수 껍데기 상태)
      - name: Build with Gradle
        run: ./gradlew bootJar

      # 5. Docker Hub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. 백엔드 Docker 이미지 빌드 및 푸시
      - name: Docker backend build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # 7. Nginx Docker 이미지 빌드 및 푸시
      - name: Docker nginx build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./config/nginx/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx:latest

      # 8. EC2에 접속하여 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # 작업 디렉토리로 이동
            cd /home/ubuntu/ceos

            # ENV 시크릿으로 .env 파일 생성
            echo "${{ secrets.ENV }}" | sudo tee .env > /dev/null

            # docker-compose.yml 파일 가져오기
            sudo curl -o docker-compose.yml https://raw.githubusercontent.com/hiwon-lee/Pigmint/main/docker-compose.yml
            
            # (사전 작업: `sudo usermod -aG docker ubuntu` 실행했다고 가정)
            
            # 더 안전한 방식으로 기존 컨테이너 내리기
            docker-compose down

            # 최신 이미지 받기 (pull은 docker-compose up이 자동으로 해주므로 생략 가능)
            # docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            # docker pull ${{ secrets.DOCKER_USERNAME }}/nginx:latest

            # docker-compose로 새 컨테이너 올리기 (sudo 없이 실행)
            docker-compose up -d

            # 불필요한 이미지 정리
            docker image prune -f